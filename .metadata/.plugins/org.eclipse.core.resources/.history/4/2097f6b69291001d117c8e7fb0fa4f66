package com.qms.auth.controller;


import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.qms.auth.dto.JwtResponse;
import com.qms.auth.dto.SignInRequest;
import com.qms.auth.dto.SignUpRequest;
import com.qms.auth.security.JwtUtils;
import com.qms.auth.service.UserService;
import com.qms.auth.serviceImpl.UserDetailsImpl;

@RestController
@RequestMapping("/api/auth")
public class AuthController {
	
	 @Autowired
	 AuthenticationManager authenticationManager;

	
	@Autowired
	private UserService userService;
	
	@Autowired
	private JwtUtils jwtUtils;

	@GetMapping("/signIn")
	public ResponseEntity<?> signIn(@RequestBody SignInRequest signInRequest) {
		Authentication authentication = (Authentication) authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(signInRequest.getEmailId(),signInRequest.getPassword()));
		
		SecurityContextHolder.getContext().setAuthentication((org.springframework.security.core.Authentication) authentication);
		String jwt = jwtUtils.generateJwtToken(authentication);
		
		UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();    
	    List<String> roles = userDetails.getAuthorities().stream()
	        .map(item -> item.getAuthority())
	        .collect(Collectors.toList());

	    return ResponseEntity.ok(new JwtResponse(jwt, 
	                         userDetails.getId(), 
	                         userDetails.getUsername(), 
	                         userDetails.getEmail(), 
	                         roles));
	}
	
	@PostMapping("/register")
	public ResponseEntity<?> register(@RequestBody SignUpRequest request) {
		return userService.register(request);
	}

}
