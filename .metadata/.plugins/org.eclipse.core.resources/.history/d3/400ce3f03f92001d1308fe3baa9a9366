package com.qms.auth.serviceImpl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.qms.auth.dto.SignInRequest;
import com.qms.auth.dto.SignUpRequest;
import com.qms.auth.repository.UserRepository;
import com.qms.auth.service.UserService;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userRepository;

	@Override
	public ResponseEntity<?> register(SignUpRequest signUpRequest) {
		
		 if (userRepository.existsByEmail(signUpRequest.get)) {
		      return ResponseEntity
		          .badRequest()
		          .body(new MessageResponse("Error: Email is already in use!"));
		    }

		    // Create new user's account
		    User user = new User(signUpRequest.getUsername(), 
		               signUpRequest.getEmail(),
		               encoder.encode(signUpRequest.getPassword()));

		    Set<String> strRoles = signUpRequest.getRole();
		    Set<Role> roles = new HashSet<>();

		    if (strRoles == null) {
		      Role userRole = roleRepository.findByName(ERole.ROLE_USER)
		          .orElseThrow(() -> new RuntimeException("Error: Role is not found."));
		      roles.add(userRole);
		    } else {
		      strRoles.forEach(role -> {
		        switch (role) {
		        case "admin":
		          Role adminRole = roleRepository.findByName(ERole.ROLE_ADMIN)
		              .orElseThrow(() -> new RuntimeException("Error: Role is not found."));
		          roles.add(adminRole);

		          break;
		        case "mod":
		          Role modRole = roleRepository.findByName(ERole.ROLE_MODERATOR)
		              .orElseThrow(() -> new RuntimeException("Error: Role is not found."));
		          roles.add(modRole);

		          break;
		        default:
		          Role userRole = roleRepository.findByName(ERole.ROLE_USER)
		              .orElseThrow(() -> new RuntimeException("Error: Role is not found."));
		          roles.add(userRole);
		        }
		      });
		    }

		    user.setRoles(roles);
		    userRepository.save(user);

		    return ResponseEntity.ok(new MessageResponse("User registered successfully!"));
		  }
		
		
		
		
		
		User user = userRequestToModel(request);
		userRepository.save(user);
		return ResponseEntity.ok("User created successfully!!!");
	}

	private User userRequestToModel(SignUpRequest request) {
		User user = new User();
		user.setUsername(request.getFirstname());
		user.setLastName(request.getLastname());
		user.setEmail(request.getEmailId());
		user.setPassword(request.getPassword());
		user.setMobileNumber(request.getMobileNumber());
		user.setCreatedOn(LocalDateTime.now());
		user.setUpdatedOn(LocalDateTime.now());
		return user;
	}

	@Override
	public ResponseEntity<?> signIn(SignInRequest signInRequest) {
//		if(signInRequest.getEmailId() == )
		return null;
	}

}


	@Override
	public ResponseEntity<?> signIn(SignInRequest signInRequest) {
		// TODO Auto-generated method stub
		return null;
	}